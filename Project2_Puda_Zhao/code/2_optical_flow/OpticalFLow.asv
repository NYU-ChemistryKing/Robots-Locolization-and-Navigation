%% PROJECT 2 VELOCITY ESTIMATION
close all;
clear all;
clc;
addpath('../data')

%Change this for both dataset 1 and dataset 4. Do not use dataset 9.
datasetNum = 1;

[sampledData, sampledVicon, sampledTime] = init(datasetNum);

%% INITIALIZE CAMERA MATRIX AND OTHER NEEDED INFORMATION
CAM_K =  [311.052, 0, 201.8724; 0, 311.3885, 113.6210; 0 , 0, 1];
track_num = 300;
for n = 2:length(sampledData)
    %% Initalize Loop load images
    img = sampledData(n-1).img;
    %% Detect good points
    corners = detectFASTFeatures(img);
    points = corners.selectStrongest(track_num);
    points = double(points.Location);
        
    %% Initalize the tracker to the last frame.
    pointTracker = vision.PointTracker('MaxBidirectionalError', 2);
    initialize(pointTracker, points, img);
    %% Find the location of the next points;
    next_points = step(pointTracker,sampledData(n).img );
    %% Calculate velocity
    % Use a for loop
    for i=1:track_num
        points_P = [points(i,1);points(i,2);1];
        next_points_P = [next_points(i,1);next_points(i,2);1];
        points_C(:,i) = CAM_K\points_P;
        next_points_C(:,i) = CAM_K\next_points_P;
        dot_p = (next_points_C' - points_C')./(sampledData(n).t - sampledData(n-1).t);
    end
    dot_xy = dot_p(:,1:2);
    %% Calculate Height
    [position, orientation, R_c2w] = estimatePose(sampledData, n-1);
    Tc_w = position;
    u = points(:,1);
    v = points(:,2);
    m = numel(u);

C_lam = CAM_K\[u';v';ones(1,m)];
r1 = R_c2w'*Tc_w;
r1 = r1(3);
r2 = R_c2w'*C_lam;
r2 = r2(3,:);
lam = r1./r2;

Xc = C_lam(1,:).*lam;
Yc = C_lam(2,:).*lam;
Zc = C_lam(3,:).*lam;

    %% RANSAC    
    % Write your own RANSAC implementation in the file velocityRANSAC
x = points_C';
X_A = x(:,1);
Y_A = x(:,2);
Vel_C = velocityRANSAC(dot_xy,points,Zc,R_c2w,1e-3);


    %% Thereshold outputs into a range.
    % Not necessary
    
    %% Fix the linear velocity
    % Change the frame of the computed velocity to world frame
    vel = R_c2w'*Vel_C(1:3);
    omg = R_c2w'*Vel_C(4:6);
    Vel = [vel;omg];

    %% ADD SOME LOW PASS FILTER CODE
    % Not neceessary but recommended
    estimatedV(:,n) = Vel;
 
    %% STORE THE COMPUTED VELOCITY IN THE VARIABLE estimatedV AS BELOW
%    estimatedV(:,n) = Vel; % Feel free to change the variable Vel to anything that you used.
    % Structure of the Vector Vel should be as follows:
    % Vel(1) = Linear Velocity in X
    % Vel(2) = Linear Velocity in Y
    % Vel(3) = Linear Velocity in Z
    % Vel(4) = Angular Velocity in X
    % Vel(5) = Angular Velocity in Y
    % Vel(6) = Angular Velocity in Z
end
for i=1:3
    estimatedV(i,:) = lowpass(estimatedV(i,:),0.01,1);
end
for i=4:6
    estimatedV(i,:) = lowpass(estimatedV(i,:),0.4,2);
end
plotData(estimatedV, sampledData, sampledVicon, sampledTime, datasetNum)

